server.servlet.context-path=/two-kafka
server.port=8015
spring.application.name= two-kafka
# apollo
spring.profiles.active=apollo

# remote kafka cluster
kafka.alert.brokers = 192.168.3.83:9092
# change it to local ip for capture
spring.kafka.bootstrap-servers = 192.168.1.30:9092
spring.kafka.producer.acks = 1
spring.kafka.producer.key-serializer= org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer= org.apache.kafka.common.serialization.ByteArraySerializer
spring.kafka.producer.retries= 5
spring.kafka.producer.client-id= two-kafka
spring.kafka.producer.batch-size= 3

spring.kafka.listener.ack-mode=count_time
spring.kafka.listener.ack-time=1000ms
spring.kafka.listener.ack-count=3
spring.kafka.listener.type=batch
spring.kafka.listener.clientId = two-kafka
spring.kafka.listener.poll-timeout=500ms
spring.kafka.listener.no-poll-threshold=0
spring.kafka.listener.concurrency = 1
spring.kafka.listener.monitorInterval = 1s
spring.kafka.listener.idle-event-interval=5s

spring.kafka.consumer.fetch-max-wait=200ms
spring.kafka.consumer.fetch-min-size=1KB
spring.kafka.consumer.max-poll-records= 200
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer= org.apache.kafka.common.serialization.ByteArrayDeserializer
